#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void insertionSort(int arr[], int arr_size) {
    int idx, inner_idx, temp, min_idx;

    for (idx = 0; idx < arr_size - 1; idx++) {
        min_idx = idx;

        for (inner_idx = idx + 1; inner_idx < arr_size; inner_idx++) {
            if (arr[inner_idx] < arr[min_idx]) {
                min_idx = inner_idx;
            }
        }

        temp = arr[idx];
        arr[idx] = arr[min_idx];
        arr[min_idx] = temp;
    }
}

int main() {
    const int base_size = 50000;
    int outer_idx, exec_idx, scale_idx, num_executions = 3, scale_factor = 8;
    int array[base_size * scale_factor];
    clock_t start_time, end_time;
    double exec_time = 0, avg_time = 0;

    srand(time(NULL));

    for (outer_idx = 0; outer_idx < scale_factor; outer_idx++) {
        printf("Array size: %d\n\n", (base_size * outer_idx));

        for (exec_idx = 0; exec_idx < num_executions; exec_idx++) {
            for (scale_idx = 0; scale_idx < (base_size * outer_idx); scale_idx++) {
                array[scale_idx] = rand() % 101;
            }

            start_time = clock();

            insertionSort(array, (base_size * outer_idx));

            end_time = clock();

            exec_time = (double)(end_time - start_time) / CLOCKS_PER_SEC;
            avg_time += exec_time;

            printf("Execution time %d: %f\n\n", exec_idx + 1, exec_time);
        }

        avg_time /= num_executions;

        printf("Average time: %f\n\n", avg_time);
    }
}
